<div id="sidebarWidth">
  <div class="sidebar">
    <div class="sidebar-item1">단체방</div>
    <div class="sidebar-item1">단체방</div>
    <div class="sidebar-item1">단체방</div>
    <div class="sidebar-item1">단체방</div>
  </div>
  <div class="sidebar2">
    <div class="sidebar-item2" onclick="moveList();">채팅</div>
    <hr>
    <div class="sidebar-item2" id="makeRoom">단체 채팅방 생성</div>
    <hr>
    <div class="sidebar-item2" id="chatChannelToggle">채팅채널</div>
    <div id="chatChannelList"></div>
    <hr>
    <div class="sidebar-item2" id="voiceChannelToggle">음성채널</div>
    <div id="voiceChannelList"></div>
    <hr>
    <div class="sidebar-item2" id="departmentToggle">부서별 사원</div>
    <div id="departmentList" style="display: none;">
      <div class="sidebar-item2">부서1 사원</div>
      <div class="sidebar-item2">부서2 사원</div>
      <div class="sidebar-item2">부서3 사원</div>
    </div>
    <hr>
    
    <div class="sidebar-item2 profile"><button>마이크X</button><button>소리X</button></div>
  </div>
</div>

<script>
  let userClick;
  let addListArr = [];
  let empList = JSON.parse('<%- JSON.stringify(locals.empList) %>');
  let currentChannel = null; // 현재 사용자가 속한 채널 (chatChannel 또는 voiceChannel)

  document.body.addEventListener('click', () => {
    userClick = event.target;
    if (event.target !== document.querySelector("div[id='makeRoom']") && !Array.from(document.querySelectorAll('.group')).some(function (element) {
      return element === event.target;
    })) {
      closeNewDiv();
    }
  });

  document.querySelector("div[id='makeRoom']").addEventListener('click', () => {
    if (!document.querySelector("div[class='group']")) {
      const newDiv = document.createElement('div');
      newDiv.className = "group";
      newDiv.innerHTML = "단체방 초대 <hr class='group'> 초대 인원 <br> <div class='group addZone'></div> <hr class='group'> 리스트 <div class='group empZone'></div><div class='btnDiv group'><button class='group' onClick='makeChatRoom();'>채팅방 만들기</button></div>"
      newDiv.style.background = 'black';
      newDiv.style.color = 'white';
      newDiv.style.position = 'fixed';
      newDiv.style.left = '170px';
      newDiv.style.width = '300px';
      newDiv.style.borderRadius = '5%';
      newDiv.style.zIndex = 9999;
      document.querySelector("div[id='makeRoom']").appendChild(newDiv);
      document.querySelector('.empZone').style.overflow = 'auto';
      empList.forEach((element, index) => {
        document.querySelector('.empZone').innerHTML += "<div class='group empsInfo' data-empNo=" + element.empNo + " data-index=" + index + " data-name=" + element.name + "'><div class='half group'><image class='group' src='" + element.picture + "'></div><div class='detailInfo group'>부서 : " + element.dept + "/ 이름 : " + element.name + " <button class='group addList' onClick='activateEvent(this);'>추가</button></div></div>";
      });
    }
  });

  function activateEvent(button) {
    const infoDiv = button.parentElement.parentElement;
    addListArr.push(infoDiv.dataset.empno)
    let addThing = document.querySelector('div[class="group addZone"]').appendChild(infoDiv);
    const changeButton = addThing.children[1].children[0];
    changeButton.classList.remove('addList');
    changeButton.classList.add('removeList');
    changeButton.innerText = "삭제";
    changeButton.setAttribute('onclick', 'removeEvent(this)');
  }

  function removeEvent(button) {
    const infoDiv = button.parentElement.parentElement;
    const empZone = document.querySelector('.empZone');
    const index = parseInt(infoDiv.getAttribute('data-index'), 10);

    addListArr = addListArr.filter(item => item !== infoDiv.dataset.empno);

    const children = Array.from(empZone.children);

    let left = 0;
    let right = children.length - 1;
    let insertPos = children.length;

    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      const midIndex = parseInt(children[mid].getAttribute('data-index'), 10);
      if (index < midIndex) {
        insertPos = mid;
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    }

    const changeButton = infoDiv.querySelector('button');
    changeButton.classList.remove('removeList');
    changeButton.classList.add('addList');
    changeButton.innerText = "추가";
    changeButton.setAttribute('onclick', `activateEvent(this, ${index})`);

    if (insertPos === children.length) {
      empZone.appendChild(infoDiv);
    } else {
      empZone.insertBefore(infoDiv, children[insertPos]);
    }
  }

  function makeChatRoom() {
    const params = new URLSearchParams();
    addListArr.forEach(member => {
        const memberObj = { [member]: null }; // 객체의 키를 동적으로 설정
        params.append('member', JSON.stringify(memberObj));
    });

    console.log("params:", params);

    // URLSearchParams 객체의 값을 모두 꺼내기
    for (const [key, value] of params.entries()) {
        console.log(`${key} asd: ${value}`);
    }
    location.href = '/hRManage/makeChatRoom?' + params;
  }

  function closeNewDiv() {
    const group = document.querySelector("div[class='group']");
    if (group) {
      group.parentNode.removeChild(group);
    }
  }

  document.querySelector("div[id='departmentToggle']").addEventListener('click', () => {
    const departmentList = document.querySelector("div[id='departmentList']");
    if (departmentList.style.display === "none") {
      departmentList.style.display = "block";
    } else {
      departmentList.style.display = "none";
    }
  });

  document.querySelector("div[id='chatChannelToggle']").addEventListener('click', () => {
    handleChannelClick('chatChannel');
  });

  document.querySelector("div[id='voiceChannelToggle']").addEventListener('click', () => {
    handleChannelClick('voiceChannel');
  });

  function handleChannelClick(channel) {
    const userName = '사원1';
    const chatChannelList = document.querySelector("div[id='chatChannelList']");
    const voiceChannelList = document.querySelector("div[id='voiceChannelList']");

    // Remove user from current channel if exists
    if (currentChannel === 'chatChannel' && channel !== 'chatChannel') {
      removeUserFromChannel(chatChannelList, userName);
    } else if (currentChannel === 'voiceChannel' && channel !== 'voiceChannel') {
      removeUserFromChannel(voiceChannelList, userName);
    }

    // Add user to the new channel
    if (channel === 'chatChannel' && !chatChannelList.innerHTML.includes(userName)) {
      chatChannelList.innerHTML += `<div class="sidebar-item2">${userName}</div>`;
    } else if (channel === 'voiceChannel' && !voiceChannelList.innerHTML.includes(userName)) {
      voiceChannelList.innerHTML += `<div class="sidebar-item2">${userName}</div>`;
    }

    // Update current channel
    currentChannel = channel;
  }

  function removeUserFromChannel(channelList, userName) {
    const userDiv = Array.from(channelList.children).find(child => child.textContent === userName);
    if (userDiv) {
      channelList.removeChild(userDiv);
    }
  }

  function moveList(){
    location.href = "/hRManage/myChatList"
  }
</script>
