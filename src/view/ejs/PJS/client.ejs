<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>화상채팅</title>
    <link href="/sidebar.css" rel="stylesheet">
    <link href="/header.css" rel="stylesheet">
</head>

<body>
    <div>
        <video id="localVideo" autoplay width="480px"></video>
        <video id="remoteVideo" width="480px" autoplay></video>
        <input type="button" value="음성" id="isAudio"><input type="button" value="화상" id="isVideo">
        <input type="button" value="종료" id="close">
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script>
        let localVideo = document.getElementById("localVideo");
        let remoteVideo = document.getElementById("remoteVideo");
        let isInitiator = false;
        let isChannelReady = false;
        let isStarted = false;
        let localStream;
        let remoteStream;
        let pc;
        let enableVideo = false;
        let isVideo = false;
        let isAudio = true;

        let pcConfig = {
            'iceServers': [{
                'urls': 'stun:stun.l.google.com:19302'
            }]
        }

        let room = '<%= room %>';

        const socket = io();

        localVideo.muted = true;

        window.onload = () => {
            startStream()
        }

        function handleIceCandidate(event) {
            console.log("iceCandidateEvent", event);
            if (event.candidate) {
                sendMessage({
                    type: "candidate",
                    label: event.candidate.sdpMLineIndex,
                    id: event.candidate.sdpMid,
                    candidate: event.candidate.candidate,
                });
            } else {
                console.log("end of candidates");
            }
        }

        function handleCreateOfferError(event) {
            console.log("createOffer() error: ", event);
        }

        function handleRemoteStreamAdded(event) {
            console.log("remote stream added");
            console.log(event)
            remoteStream = event.stream;
            remoteVideo.srcObject = remoteStream;
        }

        function createPeerConnection() {
            try {
                pc = new RTCPeerConnection(pcConfig);
                pc.onicecandidate = handleIceCandidate;
                pc.onaddstream = handleRemoteStreamAdded;
                console.log("Created RTCPeerConnection");
            } catch (e) {
                alert("connot create RTCPeerConnection object");
                return;
            }
        }

        const maybeStart = () => {
            console.log(">>MaybeStart() : ", isStarted, localStream, isChannelReady);
            if (!isStarted && typeof localStream !== "undefined" && isChannelReady) {
                console.log(">>>>> creating peer connection");
                createPeerConnection();
                pc.addStream(localStream);
                isStarted = true;
                console.log("isInitiator : ", isInitiator);
                if (isInitiator) {
                    doCall();
                }
            } else {
                console.error('maybeStart not Started!');
            }
        }

        const gotStream = (stream) => {
            console.log("Adding local stream");
            localStream = stream;
            localVideo.srcObject = stream;
            localVideo.srcObject.getVideoTracks().forEach((track) => (track.enabled = isVideo));
            sendMessage("got user media", () => {
                setTimeout(() => {
                    if(isInitiator) {
                        maybeStart();
                    }
                }, 100)
            });

        }

        const startStream = () => {
            navigator.mediaDevices
                .getUserMedia({
                    video: true,
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        autoGainControl: true
                    },
                })
                .then(gotStream)
                .catch((error) => {
                    console.error("getUserMedia error : " + error);
                });
        }


        //비디오 활성화/비활성화
        document.getElementById("isVideo").addEventListener('click', () => {
            if (isVideo) isVideo = false;
            else isVideo = true;
            localVideo.srcObject.getVideoTracks().forEach((track) => (track.enabled = isVideo));
        })

        //오디오 활성화/비황성화
        document.getElementById("isAudio").addEventListener('click', () => {
            if (isAudio) isAudio = false;
            else isAudio = true;
            localVideo.srcObject.getAudioTracks().forEach((track) => (track.enabled = isAudio));
        })

        //통화 종료
        document.getElementById('close').addEventListener('click', () => {
            if (pc) pc.close();
            localStream = null;
            socket.emit('close', room)
            location.href = '/emp/enroll'
        })

        if (room !== '') {
            socket.emit('create or join', room);
            console.log('Attempted to create or join Room', room);
        }

        socket.on('created', (room, id) => {
            console.log('Created room ' + room + ' socket ID : ' + id);
            isInitiator = true;
        })

        socket.on('full', room => {
            console.log('Room ' + room + 'is full');
        });

        socket.on('join', room => {
            console.log('Another peer made a request to join room ' + room);
            console.log('This peer is the initiator of room ' + room + '!');
            isChannelReady = true;
        })

        socket.on('joined', room => {
            console.log('joined : ' + room);
            isChannelReady = true;
        })

        socket.on('log', array => {
            console.log.apply(console, array);
        });

        socket.on('close', message => {
            pc.close();
            localStream = null;
            location.href = '/emp/enroll'
        });

        function setLocalAndSendMessage(sessionDescription) {
            pc.setLocalDescription(sessionDescription);
            sendMessage(sessionDescription);
        }

        function onCreateSessionDescriptionError(error) {
            console.error("Falied to create session Description", error);
        }

        function doCall() {
            console.log("Sending offer to peer");
            pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);
        }

        function doAnswer() {
            console.log("Sending answer to peer");
            pc.createAnswer().then(
                setLocalAndSendMessage,
                onCreateSessionDescriptionError
            );
        }

        socket.on('message', (message) => {
            console.log('Client received message :', message);
            console.log(message)
            if (message === 'got user media') {
                maybeStart()
            } else if (message.type === 'offer') {
                if (!isInitiator && !isStarted) {
                    maybeStart();
                }
                pc.setRemoteDescription(new RTCSessionDescription(message));
                doAnswer();
            } else if (message.type === 'answer' && isStarted) {
                pc.setRemoteDescription(new RTCSessionDescription(message));
            } else if (message.type === 'candidate' && isStarted) {
                const candidate = new RTCIceCandidate({
                    sdpMLineIndex: message.label,
                    candidate: message.candidate
                });
                pc.addIceCandidate(candidate);
            }
        })

        function sendMessage(message) {
            console.log('Client sending message: ', message);
            socket.emit('message', message, room);
        }

    </script>
</body>

</html>